# All the settings below can only take effect after `occlum build`.
resource_limits:
  # The number of OS threads created for this instance.
  num_of_cpus: 128
  # The stack size of LibOS kernel.
  kernel_space_stack_size: 16MB
  # The heap size of LibOS kernel.
  # With EDMM support, choose "init" size based on the expected initialization time. And increase the "max" field if memory insufficiency occurs.
  # Without EDMM support, increase the "init" field if memory insufficiency occurs. And the "max" field is ignored.
  kernel_space_heap_size:
    # Reserved and committed during the initialization stage. The more, the longer it takes to initialize.
    # NOTE: Decrease this value when EDMM support is enabled.
    init: 1024MB
    # Only committed when necessary. Only valid with EDMM support.
    max:  1024MB
  # The total size of enclave memory available to the user applications running in LibOS.
  # With EDMM support, choose "init" size based on the expected initialization time. And increase the "max" field if memory insufficiency occurs.
  # Without EDMM support, increase the "init" field if memory insufficiency occurs. And the "max" field is ignored.
  user_space_size:
    # Reserved and committed during the initialization stage. The more, the longer it takes to initialize.
    # NOTE: Decrease this value when EDMM support is enabled.
    init: 420MB
    # Only committed when necessary. Only valid with EDMM support.
    max:  64GB

# Default memory size for the users' processes. If not sure, don't modify it.
process:
  # Default stack size for each process.
  default_stack_size: 4MB
  # Default heap size for each process.
  default_heap_size: 8MB

# Entry points
# Specify all valid absolute <path> in `occlum run <path> <args>`.
# This prevents outside attackers from executing arbitrary commands inside an
# Occlum-powered enclave.
entry_points:
  - /bin

# Environment variables
#
# This gives a list of environment variables for the "root" process started
# by `occlum run` or `occlum exec` command.
env:
  # The default env vars given to each "root" LibOS process. As these env vars
  # are specified in this config file, they are considered trusted.
  default:
    - OCCLUM=yes
    - STABLE=yes
    - OVERRIDE=N
  # The untrusted env vars that are captured by Occlum from the host environment
  # and passed to the "root" LibOS processes. These untrusted env vars can
  # override the trusted, default envs specified above.
  # For example, `OCCLUM=no occlum run xxx` can pass the env OCCLUM=no to the process
  # running in LibOS with below settings.
  #     env:
  #       default:
  #         - OCCLUM=yes
  #       untrusted:
  #         - OCCLUM
  untrusted:
    - TEST
    - OVERRIDE

# Enclave metadata
# If not sure, just keep them no change
metadata:
  # Enclave signature structure's ISVPRODID field
  product_id: 0
  # Enclave signature structure's ISVSVN field
  version_number: 0
  # Whether the enclave is debuggable through special SGX instructions.
  # If set to false, no log could be output.
  # For production enclave, it is IMPORTANT to set this value to false.
  debuggable: true
  # SGX Key Separation and Sharing feature support.
  # Please always keep it as true.
  enable_kss: true
  # Enclave signature structure's ISVEXTPRODID field.
  # It is separated as two 16 bytes strings.
  ext_prod_id:
    high: '0x0'
    low: '0x0'
  # Whether to turn on PKU feature in Occlum
  # Occlum uses PKU for isolation between LibOS and userspace program,
  # It is useful for developers to detect potential bugs.
  #
  # "pkru" = 0: PKU feature must be disabled
  # "pkru" = 1: PKU feature must be enabled
  # "pkru" = 2: PKU feature is enabled if the platform supports it
  pkru: 0

# Mount points and their file systems
mount:
  # RootFS mount point and file systems.
  # Generally, just don't change it.
  - target: /
    type: unionfs
    options:
      layers:
        # The read-only layer which is generated in `occlum build`
        - target: /
          type: sefs
          source: ./build/mount/__ROOT
          options:
            MAC: ''
        # The read-write layer whose content is produced when running the LibOS
        - target: /
          type: async_sfs
          source: ./run/mount/__ROOT
          options:
            # Total size that Async-SFS can manage. Must be specified.
            async_sfs_total_size: 10GB
            # Page cache size that Async-SFS can use. Must be specified.
            # When the `page_cache_size` is given, the `kernel_space_heap_size` must be increased equally.
            page_cache_size: 256MB
  #
  # HostFS mount
  # It provides a channel to exchange files between Host FS and LibOS FS.
  # Just note, with this mount, the files written to the target in the LibOS
  # is recognizable to users in the Host thus may introduce security issue.
  #
  # For example, below section mount the occlum_instance directory in the Host FS
  # to the path /host in the LibOS FS.
  # It is disabled in default. Uncomment it if you are very sure about it.
  - target: /host
    type: hostfs
    source: .
